name: build and release

on:
  push:
    branches: [ "issues/1/m2build" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # - os_name: Linux-aarch64
          #   os: ubuntu-20.04
          #   target: aarch64-unknown-linux-musl
          #   bin: pup-linux-arm64
          # - os_name: Linux-x86_64
          #   os: ubuntu-20.04
          #   target: x86_64-unknown-linux-gnu
          #   bin: pup-linux-amd64
          # - os_name: Windows-x86_64
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   bin: pup-amd64.exe
          # - os_name: macOS-x86_64
          #   os: macOS-latest
          #   target: x86_64-apple-darwin
          #   bin: pup-darwin-amd64
          - os_name: macOS-aarch64
            os: macOS-13
            target: aarch64-apple-darwin
            bin: pup-darwin-arm64
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v3
      # Install opencv on macOS
      - name: Update Homebrew
        run: |
          brew update --preinstall
        if: matrix.platform.os_name == 'macOS-aarch64'
      - name: Configure Homebrew cache
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/Homebrew/opencv*
            ~/Library/Caches/Homebrew/miniforge*
            ~/Library/Caches/Homebrew/downloads/*--opencv-*
            ~/Library/Caches/Homebrew/downloads/*--miniforge-*
          key: brew-${{ hashFiles('.github/brew-formulae') }}
          restore-keys: brew-
      - name: Install Homebrew dependencies
        run: |
          rm '/usr/local/bin/2to3'
          env HOMEBREW_NO_AUTO_UPDATE=1 brew install miniforge
          brew unlink python@3.12
          env HOMEBREW_NO_AUTO_UPDATE=1 brew install opencv
          brew link --overwrite python@3.12
        if: matrix.platform.os_name == 'macOS-aarch64'
      # Compile, build.
      - name: Build binaries
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--release"
          strip: true
      - name: Rename binary (linux and macos)
        run: mv target/${{ matrix.platform.target }}/release/pup target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        if: matrix.platform.os_name != 'Windows-x86_64'
      - name: Rename binary (windows)
        run: mv target/${{ matrix.platform.target }}/release/pup.exe target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        if: matrix.platform.os_name == 'Windows-x86_64'
      - name: Generate SHA-256
        run: shasum -a 256 target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} | cut -d ' ' -f 1 > target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256
      - name: Release binary and SHA-256 checksum to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256
