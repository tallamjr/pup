name: "Setup Dependencies"
description: "Install system dependencies (OpenCV, GStreamer, pkg-config) and Python setup for pup project"
inputs:
  python-version:
    description: "Python version to install"
    required: false
    default: "3.11"
  enable-python:
    description: "Setup Python environment with UV"
    required: false
    default: "false"
  os:
    description: "Operating system"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install system dependencies (Ubuntu)
      if: startsWith(inputs.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          cmake \
          libglib2.0-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad \
          gstreamer1.0-plugins-ugly \
          libopencv-dev \
          clang \
          libclang-dev \
          libomp-dev

    - name: Install system dependencies (macOS)
      if: startsWith(inputs.os, 'macos')
      shell: bash
      run: |
        brew update
        brew install \
          cmake \
          pkg-config \
          glib \
          gstreamer \
          gst-plugins-base \
          gst-plugins-good \
          gst-plugins-bad \
          gst-plugins-ugly \
          opencv \
          libomp \
          llvm

        # Set environment variables for linking
        echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV
        echo "DYLD_FALLBACK_LIBRARY_PATH=$(xcode-select --print-path)/usr/lib/" >> $GITHUB_ENV

        # Fix for opencv-rust clang-sys to find libclang
        echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV

        # Fix for Xcode-beta linker issues
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV

    - name: Install UV
      if: inputs.enable-python == 'true'
      uses: astral-sh/setup-uv@v5

    - name: Setup Python with UV
      if: inputs.enable-python == 'true'
      shell: bash
      run: |
        uv venv --python "${{ inputs.python-version }}"
        source .venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
